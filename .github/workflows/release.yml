name: Release

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

jobs:
  bumpr:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.bumpr.outputs.skip }}
      next_version: ${{ steps.bumpr.outputs.next_version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Bump version on merging Pull Requests with specific labels.
    # (bump:major,bump:minor,bump:patch)
    - name: Bump version on merging PR
      id: bumpr
      uses: haya14busa/action-bumpr@v1

  build-macos:
    name: Build macOS
    needs: [bumpr]
    if: "!needs.bumpr.outputs.skip"
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get tag name
      id: tag
      uses: haya14busa/action-cond@v1
      with:
        cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
        if_true: ${{ github.ref }}
        if_false: ${{ needs.bumpr.outputs.next_version }}

    - name: Set up Go
      run: |
        sudo curl -LO https://go.dev/dl/go1.18.darwin-amd64.tar.gz
        sudo rm -rf /usr/local/go
        sudo tar -C /usr/local -xzf go1.18.darwin-amd64.tar.gz
        sudo mv /usr/local/go/bin/go /usr/local/bin/go
        sudo mv /usr/local/go/bin/gofmt /usr/local/bin/gofmt

    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        # The certificates in a PKCS12 file encoded as a base64 string
        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        # The password used to import the PKCS12 file.
        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

    - name: Install gon via HomeBrew for code signing and app notarization
      run: |
        brew tap mitchellh/gon
        brew install mitchellh/gon/gon

    - name: Build Mac OS
      id: build
      run: |
        VERSION=${{ steps.tag.outputs.value }} make release-darwin
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

    - name: Sanity Check Step
      run: |
        ./bin/cloudgrep_darwin_amd64 version

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cloudgrep_darwin
        path: ./bin/*.zip
  
  build-windows:
    name: Build Windows
    needs: [bumpr]
    if: "!needs.bumpr.outputs.skip"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get tag name
        id: tag
        uses: haya14busa/action-cond@v1
        with:
          cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
          if_true: ${{ github.ref }}
          if_false: ${{ needs.bumpr.outputs.next_version }}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18

      - name: Install windows dependencies
        id: windows-cc
        run: |
          sudo apt update &&\
          sudo apt install \
          make mingw-w64 bash --yes

      - name: Build Release Artifacts for Windows
        id: build
        run: |
          VERSION=${{ steps.tag.outputs.value }} make release-windows
        env:
          CGO_ENABLED: 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cloudgrep_windows
          path: ./bin/*.zip

  build-linux:
    name: Build Linux
    needs: [bumpr]
    if: "!needs.bumpr.outputs.skip"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
  
    - name: Get tag name
      id: tag
      uses: haya14busa/action-cond@v1
      with:
        cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
        if_true: ${{ github.ref }}
        if_false: ${{ needs.bumpr.outputs.next_version }}

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Install GCC and SQLite for Arm64
      uses: ryankurte/action-apt@v0.3.0
      with:
        arch: arm64
        packages: "gcc-10-aarch64-linux-gnu gcc-aarch64-linux-gnu libsqlite3-dev:arm64"

    - name: Build Release Artifacts for Linux
      id: build
      run: |
        make setup
        VERSION=${{ steps.tag.outputs.value }} make release-linux

    - name: Sanity Check Step
      run: |
        ./bin/cloudgrep_linux_amd64 version

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cloudgrep_linux
        path: ./bin/*.zip

  release:
    name: Create release
    needs: [bumpr,build-macos,build-linux,build-windows]
    if: "!needs.bumpr.outputs.skip"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.url }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get tag name
      id: tag
      uses: haya14busa/action-cond@v1
      with:
        cond: "${{ startsWith(github.ref, 'refs/tags/') }}"
        if_true: ${{ github.ref }}
        if_false: ${{ needs.bumpr.outputs.next_version }}

    # retrieve the darwin binaries built in the linux job
    - uses: actions/download-artifact@v2
      with:
        name: cloudgrep_linux

      # retrieve the darwin binaries built in the windows job
    - uses: actions/download-artifact@v2
      with:
        name: cloudgrep_windows

    # retrieve the darwin binaries built in the mac-os job
    - uses: actions/download-artifact@v2
      with:
        name: cloudgrep_darwin

    - run: |
          mkdir ./bin/
          cp *.zip ./bin/
          ls -lh ./bin/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.value }}
        generate_release_notes: true
        files: |
          ./bin/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

