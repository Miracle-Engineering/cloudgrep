// Code generated by mockery v2.12.2. DO NOT EDIT.

package datastore

import (
	context "context"

	model "github.com/run-x/cloudgrep/pkg/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

type Datastore_Expecter struct {
	mock *mock.Mock
}

func (_m *Datastore) EXPECT() *Datastore_Expecter {
	return &Datastore_Expecter{mock: &_m.Mock}
}

// GetFields provides a mock function with given fields: _a0
func (_m *Datastore) GetFields(_a0 context.Context) (model.Fields, error) {
	ret := _m.Called(_a0)

	var r0 model.Fields
	if rf, ok := ret.Get(0).(func(context.Context) model.Fields); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Fields)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_GetFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFields'
type Datastore_GetFields_Call struct {
	*mock.Call
}

// GetFields is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *Datastore_Expecter) GetFields(_a0 interface{}) *Datastore_GetFields_Call {
	return &Datastore_GetFields_Call{Call: _e.mock.On("GetFields", _a0)}
}

func (_c *Datastore_GetFields_Call) Run(run func(_a0 context.Context)) *Datastore_GetFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Datastore_GetFields_Call) Return(_a0 model.Fields, _a1 error) *Datastore_GetFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetResource provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetResource(_a0 context.Context, _a1 string) (*model.Resource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Resource
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_GetResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResource'
type Datastore_GetResource_Call struct {
	*mock.Call
}

// GetResource is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *Datastore_Expecter) GetResource(_a0 interface{}, _a1 interface{}) *Datastore_GetResource_Call {
	return &Datastore_GetResource_Call{Call: _e.mock.On("GetResource", _a0, _a1)}
}

func (_c *Datastore_GetResource_Call) Run(run func(_a0 context.Context, _a1 string)) *Datastore_GetResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Datastore_GetResource_Call) Return(_a0 *model.Resource, _a1 error) *Datastore_GetResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetResources provides a mock function with given fields: _a0, _a1
func (_m *Datastore) GetResources(_a0 context.Context, _a1 model.Filter) ([]*model.Resource, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*model.Resource
	if rf, ok := ret.Get(0).(func(context.Context, model.Filter) []*model.Resource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Filter) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type Datastore_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 model.Filter
func (_e *Datastore_Expecter) GetResources(_a0 interface{}, _a1 interface{}) *Datastore_GetResources_Call {
	return &Datastore_GetResources_Call{Call: _e.mock.On("GetResources", _a0, _a1)}
}

func (_c *Datastore_GetResources_Call) Run(run func(_a0 context.Context, _a1 model.Filter)) *Datastore_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Filter))
	})
	return _c
}

func (_c *Datastore_GetResources_Call) Return(_a0 []*model.Resource, _a1 error) *Datastore_GetResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Stats provides a mock function with given fields: _a0
func (_m *Datastore) Stats(_a0 context.Context) (model.Stats, error) {
	ret := _m.Called(_a0)

	var r0 model.Stats
	if rf, ok := ret.Get(0).(func(context.Context) model.Stats); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Stats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datastore_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type Datastore_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *Datastore_Expecter) Stats(_a0 interface{}) *Datastore_Stats_Call {
	return &Datastore_Stats_Call{Call: _e.mock.On("Stats", _a0)}
}

func (_c *Datastore_Stats_Call) Run(run func(_a0 context.Context)) *Datastore_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Datastore_Stats_Call) Return(_a0 model.Stats, _a1 error) *Datastore_Stats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// WriteResources provides a mock function with given fields: _a0, _a1
func (_m *Datastore) WriteResources(_a0 context.Context, _a1 []*model.Resource) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Resource) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Datastore_WriteResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteResources'
type Datastore_WriteResources_Call struct {
	*mock.Call
}

// WriteResources is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 []*model.Resource
func (_e *Datastore_Expecter) WriteResources(_a0 interface{}, _a1 interface{}) *Datastore_WriteResources_Call {
	return &Datastore_WriteResources_Call{Call: _e.mock.On("WriteResources", _a0, _a1)}
}

func (_c *Datastore_WriteResources_Call) Run(run func(_a0 context.Context, _a1 []*model.Resource)) *Datastore_WriteResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*model.Resource))
	})
	return _c
}

func (_c *Datastore_WriteResources_Call) Return(_a0 error) *Datastore_WriteResources_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewDatastore creates a new instance of Datastore. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatastore(t testing.TB) *Datastore {
	mock := &Datastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
