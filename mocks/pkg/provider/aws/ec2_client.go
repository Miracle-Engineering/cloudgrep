// Code generated by mockery v2.12.2. DO NOT EDIT.

package aws

import (
	context "context"

	ec2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// EC2Client is an autogenerated mock type for the EC2Client type
type EC2Client struct {
	mock.Mock
}

type EC2Client_Expecter struct {
	mock *mock.Mock
}

func (_m *EC2Client) EXPECT() *EC2Client_Expecter {
	return &EC2Client_Expecter{mock: &_m.Mock}
}

// DescribeInstances provides a mock function with given fields: _a0, _a1, _a2
func (_m *EC2Client) DescribeInstances(_a0 context.Context, _a1 *ec2.DescribeInstancesInput, _a2 ...func(*ec2.Options)) (*ec2.DescribeInstancesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ec2.DescribeInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) *ec2.DescribeInstancesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstancesInput, ...func(*ec2.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EC2Client_DescribeInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeInstances'
type EC2Client_DescribeInstances_Call struct {
	*mock.Call
}

// DescribeInstances is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ec2.DescribeInstancesInput
//  - _a2 ...func(*ec2.Options)
func (_e *EC2Client_Expecter) DescribeInstances(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *EC2Client_DescribeInstances_Call {
	return &EC2Client_DescribeInstances_Call{Call: _e.mock.On("DescribeInstances",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *EC2Client_DescribeInstances_Call) Run(run func(_a0 context.Context, _a1 *ec2.DescribeInstancesInput, _a2 ...func(*ec2.Options))) *EC2Client_DescribeInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2.DescribeInstancesInput), variadicArgs...)
	})
	return _c
}

func (_c *EC2Client_DescribeInstances_Call) Return(_a0 *ec2.DescribeInstancesOutput, _a1 error) *EC2Client_DescribeInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DescribeVolumes provides a mock function with given fields: _a0, _a1, _a2
func (_m *EC2Client) DescribeVolumes(_a0 context.Context, _a1 *ec2.DescribeVolumesInput, _a2 ...func(*ec2.Options)) (*ec2.DescribeVolumesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ec2.DescribeVolumesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...func(*ec2.Options)) *ec2.DescribeVolumesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVolumesInput, ...func(*ec2.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EC2Client_DescribeVolumes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeVolumes'
type EC2Client_DescribeVolumes_Call struct {
	*mock.Call
}

// DescribeVolumes is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ec2.DescribeVolumesInput
//  - _a2 ...func(*ec2.Options)
func (_e *EC2Client_Expecter) DescribeVolumes(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *EC2Client_DescribeVolumes_Call {
	return &EC2Client_DescribeVolumes_Call{Call: _e.mock.On("DescribeVolumes",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *EC2Client_DescribeVolumes_Call) Run(run func(_a0 context.Context, _a1 *ec2.DescribeVolumesInput, _a2 ...func(*ec2.Options))) *EC2Client_DescribeVolumes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*ec2.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*ec2.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*ec2.DescribeVolumesInput), variadicArgs...)
	})
	return _c
}

func (_c *EC2Client_DescribeVolumes_Call) Return(_a0 *ec2.DescribeVolumesOutput, _a1 error) *EC2Client_DescribeVolumes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewEC2Client creates a new instance of EC2Client. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewEC2Client(t testing.TB) *EC2Client {
	mock := &EC2Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
